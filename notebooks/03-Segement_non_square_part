#import statements 
import pandas as pd 
import matplotlib.pyplot as plt
import seaborn as sns 
import os 
import numpy as np

from skimage.filters import difference_of_gaussians,gaussian
from skimage.filters import threshold_otsu
from skimage.segmentation import clear_border
from skimage.measure import label, regionprops,regionprops_table ,find_contours
from skimage.color import label2rgb,rgb2gray
import matplotlib.patches as mpatches
import imageio.v3 as iio
from skimage.morphology import remove_small_holes, remove_small_objects, binary_dilation, binary_erosion
# Fill in the empty holes 
from scipy.ndimage import binary_fill_holes



def percentage_porosity_largePart(file_name):    
# Read image
    img = plt.imread(file_name)
    image_grayscale = rgb2gray(img)

    #Otsu threhold to get greyscale image.
    thresh = threshold_otsu(image_grayscale)
    binary = image_grayscale > thresh

    # Remove artifacts from the image
    removed_small_objects = remove_small_objects(binary, 6,False)
    tidy_image = remove_small_holes(removed_small_objects, area_threshold=5)

    # label image regions
    label_image = label(tidy_image)

    regions = regionprops(label_image)

    # Find the region with the largest area
    if regions:
        largest_region = max(regions, key=lambda r: r.area)
        
        # Create a new mask containing only the largest object
        # The new mask will have 1s where the largest object is, and 0s elsewhere.
        largest_object_mask = (label_image == largest_region.label)
    else:
        print("No objects found in the image mask.")

    filled_mask = binary_fill_holes(largest_object_mask)

    holes_mask = filled_mask != largest_object_mask

    labeled_holes = label(holes_mask)

    props = regionprops_table(labeled_holes, properties=['label', 'area'])
    data = pd.DataFrame(props)  
    sum_pores_px = data.area.sum()
    Total_Area =np.count_nonzero(filled_mask)

    percentage_porosity = (1 - (sum_pores_px/Total_Area)) * 100
    return percentage_porosity